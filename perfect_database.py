"""
–°–æ–∑–¥–∞–µ—Ç —Ç–æ—á–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
"""
import json
import re
from typing import Dict, List, Tuple, Optional


class PerfectDatabase:
    def __init__(self, data_path: str = "dataset.jsonl"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ç–æ—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
        self.qa_pairs = []
        self.load_data(data_path)
        self.create_index()

    def load_data(self, data_path: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSONL —Ñ–∞–π–ª–∞"""
        print(f"üìö –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ {data_path}...")

        try:
            with open(data_path, 'r', encoding='utf-8') as f:
                for line in f:
                    if line.strip():
                        item = json.loads(line.strip())
                        self.qa_pairs.append({
                            'question': item['instruction'],
                            'answer': item['output'],
                            'keywords': self._extract_keywords(item['instruction'])
                        })

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.qa_pairs)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            self._create_fallback_data()

    def _create_fallback_data(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏"""
        self.qa_pairs = [
            {
                'question': '–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—â–µ–∂–∏—Ç–∏–µ –î–°3?',
                'answer': '–û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ3 –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ê–ª–º–∞—Ç—ã, –º–∫—Ä ‚Ññ1 81–ê.',
                'keywords': ['–¥—Å3', '–æ–±—â–µ–∂–∏—Ç–∏–µ', '–≥–¥–µ', '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è']
            },
            {
                'question': '–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—â–µ–∂–∏—Ç–∏–µ –î–°2–±?',
                'answer': '–û–±—â–µ–∂–∏—Ç–∏–µ –î–°2–± –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ê–ª–º–∞—Ç—ã, –¢–∞—É–≥—É–ª—å 34.',
                'keywords': ['–¥—Å2–±', '–æ–±—â–µ–∂–∏—Ç–∏–µ', '–≥–¥–µ', '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è']
            },
            {
                'question': '–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—â–µ–∂–∏—Ç–∏–µ –î–°2–∞?',
                'answer': '–û–±—â–µ–∂–∏—Ç–∏–µ –î–°2–ê –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ê–ª–º–∞—Ç—ã, –¢–∞—É–≥—É–ª—å 32.',
                'keywords': ['–¥—Å2–∞', '–æ–±—â–µ–∂–∏—Ç–∏–µ', '–≥–¥–µ', '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è']
            },
            {
                'question': '–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—â–µ–∂–∏—Ç–∏–µ –ï–º–µ–Ω?',
                'answer': '–û–±—â–µ–∂–∏—Ç–∏–µ –ï–º–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ê–ª–º–∞—Ç—ã, –º–∫—Ä ‚Ññ10 26/1.',
                'keywords': ['–µ–º–µ–Ω', '–æ–±—â–µ–∂–∏—Ç–∏–µ', '–≥–¥–µ', '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è']
            },
            {
                'question': '–ú–Ω–µ –Ω–µ –¥–∞–ª–∏ –æ–±—â–µ–∂–∏—Ç–∏–µ',
                'answer': '–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –¥–µ–∫–∞–Ω–∞—Ç –∏–ª–∏ –æ—Ç–¥–µ–ª —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏.',
                'keywords': ['–Ω–µ', '–¥–∞–ª–∏', '–æ–±—â–µ–∂–∏—Ç–∏–µ']
            }
        ]
        print("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")

    def _extract_keywords(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        text = text.lower()
        text = re.sub(r'[^\w\s]', '', text)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        stop_words = {'–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–∑–∞', '–æ—Ç', '–∫', '—É', '–æ', '–∏–∑', '—á—Ç–æ', '–∫–∞–∫', '–∞', '–Ω–æ', '–∏–ª–∏'}
        words = [word for word in text.split() if word not in stop_words]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—â–µ–∂–∏—Ç–∏–π
        special_keywords = ['–¥—Å3', '–¥—Å2–∞', '–¥—Å2–±', '–µ–º–µ–Ω', '–æ–±—â–µ–∂–∏—Ç–∏–µ', '–∞–¥—Ä–µ—Å']
        for keyword in special_keywords:
            if keyword in text.lower() and keyword not in words:
                words.append(keyword)

        return words

    def create_index(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        self.keyword_index = {}

        for i, qa_pair in enumerate(self.qa_pairs):
            for keyword in qa_pair['keywords']:
                if keyword not in self.keyword_index:
                    self.keyword_index[keyword] = []
                self.keyword_index[keyword].append(i)

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –∏–∑ {len(self.keyword_index)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")

    def find_exact_match(self, question: str) -> Optional[str]:
        """–ò—â–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞"""
        question_lower = question.lower().strip()

        for qa_pair in self.qa_pairs:
            if qa_pair['question'].lower().strip() == question_lower:
                return qa_pair['answer']

        return None

    def find_best_match(self, question: str) -> Tuple[str, float]:
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        exact_match = self.find_exact_match(question)
        if exact_match:
            return exact_match, 1.0

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
        keywords = self._extract_keywords(question)

        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
        if not keywords:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –µ–≥–æ.", 0.3

        # –°—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ
        scores = []
        for i, qa_pair in enumerate(self.qa_pairs):
            matched_keywords = set(keywords) & set(qa_pair['keywords'])
            score = len(matched_keywords) / max(len(keywords), len(qa_pair['keywords']))

            # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            for keyword in ['–¥—Å3', '–¥—Å2–∞', '–¥—Å2–±', '–µ–º–µ–Ω']:
                if keyword in matched_keywords:
                    score += 0.3

            scores.append((i, score))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—Ü–µ–Ω–∫–∏
        scores.sort(key=lambda x: x[1], reverse=True)

        # –ï—Å–ª–∏ –ª—É—á—à–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        if scores and scores[0][1] > 0.4:
            best_match_idx = scores[0][0]
            return self.qa_pairs[best_match_idx]['answer'], scores[0][1]

        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –µ–≥–æ.", 0.2

    def get_answer(self, question: str) -> Tuple[str, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –æ—Ü–µ–Ω–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –æ–±—â–µ–∂–∏—Ç–∏–π
        question_lower = question.lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∞–¥—Ä–µ—Å–∞—Ö –æ–±—â–µ–∂–∏—Ç–∏–π
        if '–¥—Å3' in question_lower or '–¥—Å 3' in question_lower or '–¥—Å-3' in question_lower:
            if any(word in question_lower for word in ['–≥–¥–µ', '–∞–¥—Ä–µ—Å', '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è', '—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω']):
                return '–û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ3 –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ê–ª–º–∞—Ç—ã, –º–∫—Ä ‚Ññ1 81–ê.', 1.0

        if '–¥—Å2–∞' in question_lower or '–¥—Å 2–∞' in question_lower or '–¥—Å-2–∞' in question_lower:
            if any(word in question_lower for word in ['–≥–¥–µ', '–∞–¥—Ä–µ—Å', '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è', '—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω']):
                return '–û–±—â–µ–∂–∏—Ç–∏–µ –î–°2–ê –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ê–ª–º–∞—Ç—ã, –¢–∞—É–≥—É–ª—å 32.', 1.0

        if '–¥—Å2–±' in question_lower or '–¥—Å 2–±' in question_lower or '–¥—Å-2–±' in question_lower:
            if any(word in question_lower for word in ['–≥–¥–µ', '–∞–¥—Ä–µ—Å', '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è', '—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω']):
                return '–û–±—â–µ–∂–∏—Ç–∏–µ –î–°2–± –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ê–ª–º–∞—Ç—ã, –¢–∞—É–≥—É–ª—å 34.', 1.0

        if '–µ–º–µ–Ω' in question_lower:
            if any(word in question_lower for word in ['–≥–¥–µ', '–∞–¥—Ä–µ—Å', '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è', '—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω']):
                return '–û–±—â–µ–∂–∏—Ç–∏–µ –ï–º–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ê–ª–º–∞—Ç—ã, –º–∫—Ä ‚Ññ10 26/1.', 1.0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–µ–ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–∂–∏—Ç–∏—è
        if ('–Ω–µ –¥–∞–ª–∏' in question_lower or '–æ—Ç–∫–∞–∑–∞–ª–∏' in question_lower) and '–æ–±—â–µ–∂–∏—Ç–∏' in question_lower:
            return '–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –¥–µ–∫–∞–Ω–∞—Ç –∏–ª–∏ –æ—Ç–¥–µ–ª —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏.', 1.0

        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ
        return self.find_best_match(question)


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if __name__ == "__main__":
    db = PerfectDatabase()

    test_questions = [
        "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—â–µ–∂–∏—Ç–∏–µ –î–°3?",
        "–ê–¥—Ä–µ—Å –î–°2–∞?",
        "–ö–∞–∫ –Ω–∞–π—Ç–∏ –æ–±—â–µ–∂–∏—Ç–∏–µ –ï–º–µ–Ω?",
        "–ú–Ω–µ –Ω–µ –¥–∞–ª–∏ –æ–±—â–µ–∂–∏—Ç–∏–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å?",
        "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –æ–±—â–µ–∂–∏—Ç–∏—è?",
        "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∂–∏–≤—ë—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ?",
    ]

    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    for question in test_questions:
        answer, confidence = db.get_answer(question)
        print(f"‚ùì {question}")
        print(f"ü§ñ {answer}")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
        print("-" * 50)
